root비번 mysql
sql 명령문을 만들어 애플리케이션에서 dbms로 보낼 때 사용하는 객체가 Statement

String url = "jdbc:mysql://localhost:3307/spring5fs";	// url
Class.forName("com.mysql.cj.jdbc.Driver");	// 연결 확인
Connection con = DriverManager.getConnection(url, "계정", "비밀번호");	// 커넥션 객체 생성

CRUD
Create: insert문
Read: select문
Update: update문
Delete: delete문

Class.forName("com.mysql.cj.jdbc.Driver");	// JDBC Driver 클래스를 Build Path에서 찾고, 메모리로 로딩
Connection con = DriverManager.getConnection("연결문자열", "사용자", "비밀번호");	// DB와 연결
연결문자열: jdbc:mysql://"IP주소":"포트"/"데이터베이스 이름"

매개변수화된 SQL문을 실행하기 위해 PreparedStatement가 필요하다. 매개변수 칸은 ?를 기입한다.
ex) insert into test values(?, ?);
PreparedStatement pstmt = con.PreparedStatement("sql문");
후에 ?에 들어갈 값을 지정한다. ?는 순서에 따라 1번부터 번호가 부여된다.
pstmt.setXXX("번호", "데이터값(XXX)");	// 데이터 타입에 따라 사용할 메소드 변경

Statement의 executeUpdate() 메소드를 호출하면 저장돼있던 sql문이 실행된다. 리턴값은 변경된 행의 수이다.

데이터를 읽기 위해선 Statement의 executeQuery() 메소드를 사용한다. 리턴값은 ResultSet이다.
ResultSet은 행의 집합이다. ResultSet은 커서가 있는 행의 데이터만 읽을 수 있는데, 처음 커서의 위치는 beforeFirst, 즉 빈 공간
이므로 next() 메소드를 호출하여 첫 비어있는 행을 가리키는 커서를 옮겨야한다. 
next() 메소드는 커서를 다음 행으로 이동시키며, 이동한 행에 데이터가 있으면 true, 없으면 false를 리턴한다.
ResultSet의 커서가 가리키는 행의 데이터는 getXXX("컬럼 명 또는 순번"); 메소드를 사용해 읽는다. 리턴값은 XXX

ResultSetMetaData는 ResultSet의 메타정보를 저장한다. getColumnCount()는 컬럼 개수를 반환하며, getColumnName(i)는 컬럼 이름을 반환한다.
인덱스는 1부터 시작한다.


정규화는 테이블 간에 중복된 데이터를 허용하지 않는다는 것이다. 중복된 데이터를 허용하지 않음으로써 무결성(Integrity)를 유지할 수 있으며,
DB의 저장 용량 역시 줄일 수 있다
데이터베이스의 정규화는 1NF -> 2NF -> 3NF -> BCNF -> 4NF -> 5NF의 순서를 거친다.
제 1정규화는 컬럼이 원자값(하나의 값)을 가질 수 있게 테이블을 분해하는 것이다.
제 2정규화는 제 1정규화를 진행한 테이블에 대해 완전 함수 종속을 만족하도록 테이블을 분해하는 것이다.
여기서 완전 함수 종속이라는 것은 기본키의 부분집합이 결정자가 되어선 안된다는 것을 의미한다.
테이블 R에 존재하는 필드들의 부분 집합, X와 Y가 있을 때, X의 한 값이 Y에 속한 하나의 값에만 매핑되는 경우, Y는 X에 함수 종속적이다 라고 한다.,
이 때 X는 결정자, Y를 종속자라 한다.
제3 정규화란 제2 정규화를 진행한 테이블에 대해 이행적 종속을 없애도록 테이블을 분해하는 것이다. 
여기서 이행적 종속이라는 것은 A -> B, B -> C가 성립할 때 A -> C가 성립되는 것을 의미한다.


