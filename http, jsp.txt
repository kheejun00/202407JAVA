톰캣은 아파치를 돌리는 서버 컨테이너이다

String url = "jdbc:mysql://localhost:3307/spring5fs";
Connection con = null;
ResultSet rs = null;
PreparedStatement pstmt = null;
Class.forName("com.mysql.cj.jdbc.Driver");
con = DriverManager.getConnection(url, "root", "mysql");

	public static void close(PreparedStatement pstmt, Connection con) {
		try {
			pstmt.close();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		
		try {
			con.close();
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}

	public static void close(ResultSet rs, PreparedStatement pstmt, Connection con) {
		try {
			rs.close();
		}catch (SQLException e) {
			e.printStackTrace();
		}

		try {
			pstmt.close();
		}catch (SQLException e) {
			e.printStackTrace();
		}
		
		try {
			con.close();
		}catch(SQLException e) {
			e.printStackTrace();
		}
	}


window > preferences > Server > runtimeEnvironment > add > apache tomcat 9.0으로 톰캣서버 추가

doGet 메소드는 Get 방식으로 데이터를 받는 리퀘스트 객체가 있다.
데이터를 전달하기 위해선 jsp 페이지에서 input 태그에 name 속성을 주어 전달할 수 있으며, 
request.getParameter("name속성값") 으로 호출이 가능하다.

response.setContentType("text/html;charset=utf-8");	// 인코딩방식 utf-8로 설정
request.getContextPath()는 프로젝트 이름을 반환한다.

form 태그로 웹페이지 이동 및 데이터를 전송할 수 있다.

정적페이지: 변하지 않는 성격을 가진 페이지
동적페이지: 자동으로 생성된 페이지, 기존의 웹 서버에 새로운 기능을 가진 프로ㅓ그램을 탑재하여 동적으로 html을 생성

<form>태그에서 지정한 값을 보낼 때는 input type = "hidden"을 사용한다.
<input type = "hidden" name = "이름" = value = "보낼 값">

DAO(Data Access Object)는 DB에 접근하기 위한 객체이다.
DTO(Data Transfer Object)는 로직을 가지지 않은 데이터 객체이다.
VO(Value Object)는 Read-Only 속성을 가진 객체이다.

쿠키는 웹 페이지에서 데이터를 저장하기 위한 객체이며, 사용자의 편의를 위해 사용한다.
1. 쿠키 생성 -> 2. 쿠키 저장 -> 3. 쿠키 전달
response.addCookie(쿠키)	// 쿠키를 생성한다.
request.getCookies()	// 쿠키들을 배열형태로 반환한다.

(Cookie 메소드)
setMaxAge(expiry)	// 쿠키의 유효시간을 설정
쿠키의 삭제는 쿠키의 유효시간을 0으로 만들고 addCookie()를 한다.
